generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  userName      String   
  balance       Int           @default(0)
  bets          Bet[]    
  email         String        @unique
  password      String   
  memberId      String        @unique
  avatarUrl     String   
  payment       Payment[]
  bankAccount   BankAccount[]
  withdrawals   Withdrawal[]
}

model Game {
  id          Int        @id @default(autoincrement())
  cardA       String   
  cardB       String  
  winner      String   
  createdAt   DateTime   @default(now())
  bets        Bet[]   
  status      Gamestatus @default(PENDING)
  updatedAt   DateTime   @updatedAt
}

enum Gamestatus {
  PENDING
  COMPLETED
  IN_PROGRESS
}

model Bet {
  id            Int        @id @default(autoincrement())
  amount        Float
  chosenSide    String 
  user          User       @relation(fields: [userId], references: [id])
  userId        Int
  game          Game       @relation(fields: [gameId], references: [id])
  gameId        Int
  result        Betresult  @default(PENDING) 
  createdAt     DateTime   @default(now())
  commission    Float      @default(0.00)
}

model Otp {
  id          Int       @id  @default(autoincrement())
  email       String    @unique
  otpHash     String
  expiresIn   DateTime
  createdIn   DateTime  @default(now())  
}

enum Betresult {
  PENDING
  WIN
  LOSE
}


model Payment {
  id            Int        @id @default(autoincrement())
  upiRef        String     @unique 
  amount        Int
  userId        Int
  status        String
  createdAt     DateTime   @default(now())
  user          User       @relation(fields: [userId], references: [id])
  senderMobile  String 
  remarks       String?
  senderName    String
}

model BankAccount {
  id                  Int             @id   @default(autoincrement())
  accountNumber       String
  ifscCode            String 
  upiId               String?
  bankName            String
  userId              Int
  user                User            @relation(fields: [userId], references: [id])
  accountHolderName   String
  email               String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  withdrawals         Withdrawal[]
}

model Withdrawal{
  id                       Int             @id    @default(autoincrement())
  withdrawalStatus         WithdrwalStatus @default(PENDING)
  userId                   Int        
  user                     User            @relation(fields: [userId], references: [id])
  bankAccountId            Int
  bank                     BankAccount     @relation(fields: [bankAccountId], references: [id])
  amount                   Int
  transactionId            String
  createdAt                DateTime        @default(now())
  completedAt              DateTime?       
 }          


enum WithdrwalStatus { 
  PENDING
  FAILED
  SUCCESS
}